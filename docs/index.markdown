---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults

layout: home
title: "ソフトウェア工学　2024"
---

# ソフトウェア工学 2024

git/github演習

## gitの主要なコマンド一覧

- **git status**: Gitによって現在されている変更を追跡が可能。
- **git add**: 特定のファイルに変更が加わったかを知らせるよう指示するコマンド。
- **git commit**: 作成者の名前、日付、実行した内容のコメントやメールアドレスなどの識別子を含む作業内容のスナップショットを保存できる。
- **git log**: 以前のコミットについての情報を表示する。
- **git help**: コマンドに関する情報を取得する。`git <知りたいコマンド名> --help` によって特定のコマンドに関する情報のみ表示することも可能。

## gitの主な機能

- **コミット**: 作業の変更内容をローカルリポジトリに保存する。各コミットはユニークな識別子であるハッシュ値を持ち、プロジェクトの変更履歴として記録される。
- **ブランチ**: 新しい機能や修正を独立して開発するための分岐で、ブランチを使用することで、メインのコードに影響を与えずに実験することが可能とも言える。
- **マージ**: 異なるブランチで行った変更を一つのブランチに統合すること。
- **プル**: リモートリポジトリから最新の変更を取得し、ローカルリポジトリに反映すること。他人の作業内容を自分の環境に取り込める。
- **プッシュ**: ローカルリポジトリで行った変更をリモートリポジトリに送信する。他の開発者が自分の変更を取得できる。

## WBS（Work Breakdown Structure）

WBSは、プロジェクト目標を達成し、必要な要素成果物を生成するために、チームが実行する作業を段階的に要素分解したもので、具体的には、プロジェクトを細かな作業（Work）に分解（Breakdown）し、構成図（Structure）として整理する。作業を細かく分解し、作業順に並べることが重要。

### メリット

- **スコープが明確になる**: やらないことが明確になるため、プロジェクトの範囲が明確化する。
- **作業を洗い出す**: やるべき作業が具体的に明確になるため、タスクの漏れを防ぐことができる。
- **全体管理と作業計画が明確化される**: プロジェクトの全体像と各作業の順序が明確になるため、計画の精度が向上する。
- **プロジェクト実施時のガイドライン**: WBSに則ってプロジェクトを進行することで、計画通りに作業を進めることができる。

WBSは、プロジェクトの計画プロセスにおけるスコープ管理とスケジュール管理の要で、適切なWBSを作成することで、プロジェクトの成功率を高めることができる。

## UML（Unified Modeling Language）

UMLは、万国共通の記法であり、オブジェクト指向プログラミングの概念を基にしている。UML 2.0に準じて、システムの設計および開発を図示化（モデル化）するための標準的な言語であり、文章によるドキュメントに加えて、可視化されているモデルを提供することで、複雑なシステムの理解とコミュニケーションを容易にする。

### UMLの利点

- **視覚的なモデル化**: UMLは、システムの設計を視覚的に表現するための図を提供する。これにより、開発者、マネージャー、ユーザー間でのコミュニケーションが円滑になる。
- **統一された記法**: 異なる開発者やチーム間での仕様の共有が簡単になって、異なる方法論や記法による混乱を避けることができる。

## Flake8

Flake8は、Pythonコードの静的解析ツールで、科特性を高めるためのツール。PyFlakes、pycodestyle、McCabeのラッパーとして機能し、コードのエラーチェックやスタイルガイド（PEP8）に準拠しているかどうかを確認する。Flake8を使用することで、開発者は効率的にコードの品質を保つことができる。

### Flake8の利点

- **コード品質の向上**: Flake8を使用することで、コードの品質を高める。スタイルガイドに準拠し、論理エラーを早期に発見することで、バグの発生を未然に防ぐことに長けている。
- **開発効率の向上**: 自動化されたチェックにより、手動でのレビュー作業が軽減され、開発効率が向上する。
- **チーム開発の支援**: 統一されたスタイルガイドに基づくチェックにより、チーム内でのコードの一貫性が保たれる。
